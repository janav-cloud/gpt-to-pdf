// Trigger PDF Generation
document.getElementById('exportBtn').addEventListener('click', () => {
  const btn = document.getElementById('exportBtn');
  btn.textContent = 'Exporting...';
  btn.disabled = true;

  chrome.runtime.sendMessage({ action: 'exportToPDF' }, (response) => {
    btn.textContent = 'Export to PDF';
    btn.disabled = false;

    if (response.status === 'success') {
      try {
        generatePDF(response.conversation, response.settings, response.chatTitle);
        alert('PDF exported successfully!');
      } catch (error) {
        console.error('PDF generation error:', error);
        alert('Error exporting PDF: ' + error.message);
      }
    } else {
      alert('Error exporting PDF: ' + response.error);
    }
  });
});

function generatePDF(conversation, settings, chatTitle) {
  const themes = {
    light: {
      headerColor: '#222',
      promptColor: '#1565c0',
      answerColor: '#333',
      background: '#fff',
      answerBg: '#f5f5f5'
    },
    dark: {
      headerColor: '#fff',
      promptColor: '#90caf9',
      answerColor: '#eee',
      background: '#222',
      answerBg: '#333'
    },
    professional: {
      headerColor: '#003366',
      promptColor: '#003366',
      answerColor: '#333',
      background: '#f0f0f0',
      answerBg: '#e6e6e6'
    }
  };
  const theme = themes[settings.theme] || themes.light;
  const fontMap = {
    Roboto: 'Roboto',
    Courier: 'Courier'
  };
  const font = fontMap[settings.font] || 'Roboto';

  const docDefinition = {
    content: [
      { text: chatTitle || 'GPT Conversation Export', style: 'header', margin: [0, 0, 0, 16] },
      ...conversation.flatMap(item => {
        // Label for prompt/answer
        const label = {
          text: item.type === 'prompt' ? 'Prompt:' : 'Answer:',
          bold: true,
          color: item.type === 'prompt' ? theme.promptColor : theme.answerColor,
          margin: [0, 8, 0, 2]
        };

        // Detect code blocks and split
        if (/```[\s\S]*?```/.test(item.text)) {
          const parts = item.text.split(/(```[\s\S]*?```)/g).filter(Boolean);
          return [
            label,
            ...parts.map(part => {
              if (part.startsWith('```') && part.endsWith('```')) {
                return {
                  text: part.replace(/```/g, '').trim(),
                  style: 'code',
                  margin: [0, 0, 0, 8]
                };
              } else {
                return {
                  text: part,
                  style: item.type,
                  margin: [0, 0, 0, 8]
                };
              }
            }),
            { text: '', margin: [0, 0, 0, 8] } // extra space after each Q/A
          ];
        } else {
          return [
            label,
            {
              text: item.text,
              style: item.type,
              margin: [0, 0, 0, 12]
            }
          ];
        }
      })
    ],
    defaultStyle: {
      font: font,
      fontSize: 12,
      color: theme.answerColor
    },
    styles: {
      header: {
        fontSize: 18,
        bold: true,
        color: theme.headerColor,
        margin: [0, 0, 0, 10]
      },
      prompt: {
        bold: false,
        color: theme.promptColor,
        fontSize: 13,
        margin: [0, 8, 0, 2]
      },
      answer: {
        color: theme.answerColor,
        margin: [0, 0, 0, 8]
      },
      code: {
        font: 'Courier',
        fontSize: 11,
        color: '#222',
        fillColor: theme.answerBg,
        margin: [0, 4, 0, 8]
      }
    },
    pageMargins: [32, 32, 32, 32],
    footer: function(currentPage, pageCount) {
      return {
        text: 'Generated by GPT to PDF : Made with ðŸ’Œ by Janav Dua',
        alignment: 'center',
        fontSize: 9,
        color: '#888',
        margin: [0, 10, 0, 0]
      };
    }
  };

  pdfMake.createPdf(docDefinition).download('gpt_conversation.pdf');
}